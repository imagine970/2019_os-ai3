{\rtf1\ansi\ansicpg936\deff0\nouicompat\deflang1033\deflangfe2052{\fonttbl{\f0\fnil\fcharset134 \'cb\'ce\'cc\'e5;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang2052 Stride Scheduling\par
Stride\'b5\'f7\'b6\'c8\'cb\'e3\'b7\'a8\'b5\'c4\'d4\'ad\'c0\'ed\'ca\'c7\'b1\'e4\'cf\'e0\'b5\'c4\'d3\'c5\'cf\'c8\'bc\'b6\'b5\'f7\'b6\'c8\'a3\'ac\'c3\'bf\'b8\'f6\'bd\'f8\'b3\'cc\'b6\'bc\'b4\'e6\'d4\'da\'d2\'bb\'b8\'f6stride\'ba\'cdpass\'a3\'a8\'bf\'c9\'d3\'c9\'c6\'e4\'d3\'c5\'cf\'c8\'bc\'b6\'bc\'c6\'cb\'e3\'a3\'a9\'a3\'ac\'c3\'bf\'b4\'ce\'b5\'f7\'b6\'c8\'b3\'cc\'d0\'f2\'bd\'ab\'d1\'a1\'d4\'f1stride\'d7\'ee\'d0\'a1\'b5\'c4\'bd\'f8\'b3\'cc\'bd\'f8\'d0\'d0\'d4\'cb\'d0\'d0\'c8\'bb\'ba\'f3\'bd\'ab\'c6\'e4stride\'d4\'f6\'bc\'d3pass\'a3\'ac\'d4\'ad\'c0\'ed\'b1\'c8\'bd\'cf\'bc\'f2\'b5\'a5\'a3\'acStride\'cb\'e3\'b7\'a8\'d3\'d0\'c1\'b4\'b1\'ed\'d3\'eb\'d0\'b1\'b6\'d1\'c1\'bd\'d6\'d6\'ca\'b5\'cf\'d6\'b7\'bd\'ca\'bd\'a3\'ac\'d5\'e2\'c0\'ef\'ce\'d2\'d1\'a1\'d4\'f1\'b5\'c4\'ca\'c7\'d0\'b1\'b6\'d1\'a3\'a8\'d2\'f2\'ce\'aa\'d0\'a7\'c2\'ca\'b8\'fc\'b8\'df\'a3\'a9\'a3\'ac\'cf\'c2\'c3\'e6\'b8\'f9\'be\'dd\'b4\'fa\'c2\'eb\'c0\'b4\'bd\'f8\'d0\'d0\'b7\'d6\'ce\'f6\'a1\'a3\par
BIG_STRIDE:\par
\par
#define BIG_STRIDE  0x7FFFFFFF  /* you should give a value, and is ??? */\par
\par
BIG_STRIDE\'ca\'c7\'d2\'bb\'b8\'f6\'b4\'f3\'d5\'fb\'ca\'fd\'a3\'ac\'c6\'e4\'b4\'fa\'b1\'ed\'d7\'c5\'bd\'f8\'b3\'cc\'c3\'bf\'b4\'ce\'c4\'dc\'b9\'bb\'c7\'b0\'bd\'f8\'b5\'c4\'d7\'ee\'b4\'f3\'b2\'bd\'b3\'a4\'ca\'fd\'a3\'ac\'bd\'abBIG_STRIDE\'c9\'e8\'ce\'aa0x7FFFFFFF\'b5\'c4\'d4\'ad\'d2\'f2\'d3\'d0\'c1\'bd\'b8\'f6\'a3\'ba\par
\par
a.  0x7FFFFFFF\'ca\'c7\'d3\'d0\'b7\'fb\'ba\'c5int\'b5\'c4\'d7\'ee\'b4\'f3\'d5\'fd\'d6\'b5\par
b. \'d3\'eb\'b1\'c8\'bd\'cf\'ba\'af\'ca\'fdproc_stride_comp_f\'d3\'d0\'b9\'d8  \par
static int\par
proc_stride_comp_f(void *a, void *b)\par
\{\par
     struct proc_struct *p = le2proc(a, lab6_run_pool);\par
     struct proc_struct *q = le2proc(b, lab6_run_pool);\par
     int32_t c = p->lab6_stride - q->lab6_stride;\par
     if (c > 0) return 1;\par
     else if (c == 0) return 0;\par
     else return -1;\par
\}\par
proc_stride_comp_f\'ca\'c7\'d3\'c3\'c0\'b4\'b1\'c8\'bd\'cf\'c1\'bd\'b8\'f6\'bd\'f8\'b3\'cc\'d6\'ae\'bc\'e4stride\'b5\'c4\'b4\'f3\'d0\'a1\'a3\'acproc_struct\'b5\'c4lab6_stride\'ca\'c7\'ce\'de\'b7\'fb\'ba\'c5int\'a3\'ac\'d5\'e2\'c0\'ef\'d3\'c3\'bc\'f5\'b7\'a8p->lab6_stride - q->lab6_stride\'c0\'b4\'b1\'c8\'bd\'cf\'b4\'f3\'d0\'a1\'a3\'ac\'c6\'e4\'bd\'e1\'b9\'fbc\'ca\'c7\'d2\'bb\'b8\'f6\'d3\'d0\'b7\'fb\'ba\'c5c, \'bf\'c9\'d2\'d4\'b1\'dc\'c3\'e2lab6_stride\'d2\'e7\'b3\'f6\'ce\'aa\'b8\'ba\'ca\'fd\'b6\'f8\'b5\'bc\'d6\'c2\'b4\'ed\'ce\'f3\'a3\'ac\'c8\'bb\'b6\'f8\'bd\'f8\'b3\'ccstride\'b5\'c4\'d4\'f6\'bc\'d3\'c8\'d4\'bf\'c9\'c4\'dc\'b5\'bc\'d6\'c2lab6_stride\'bc\'cc\'d0\'f8\'d2\'e7\'b3\'f6\'a3\'ac\'d2\'f2\'b6\'f8\'d3\'d0\'d2\'d4\'cf\'c2\'d2\'aa\'c7\'f3\'a1\'a3\par
\'bc\'d9\'c8\'e7q>=p\'a3\'ac\'b4\'cb\'ca\'b1\'b5\'f7\'b6\'c8p\'a3\'acp\'b5\'c4stride\'d4\'f6\'bc\'d3s\'b5\'c4\'b3\'a4\'b6\'c8\'a3\'ac\'c8\'f4p\'d2\'e7\'b3\'f6\'a3\'ac\'d4\'f2\'b1\'d8\'d0\'eb\'b1\'a3\'d6\'a4\'cf\'c2\'d2\'bb\'b4\'ce\'b5\'f7\'b6\'c8\'ca\'b1p>q\'a3\'ac\'bc\'b4b+s-2^32>q, \'d3\'c9\'d2\'f2\'ce\'aab,q\'b6\'bc\'ce\'aa\'ce\'de\'b7\'fb\'ba\'c5\'ca\'fd\'a3\'ac\'d6\'bb\'d3\'d0q-p\'d2\'e7\'b3\'f6\'ce\'aa\'b8\'ba\'ca\'fd\'a3\'ac\'d2\'f2\'b4\'cbs<231+q-p,\'d3\'d6q>=p\'a3\'ac\'d2\'f2\'b4\'cbs<231\'a1\'a3\par
\'b9\'caBIG_STRIDE\'b5\'c4\'d7\'ee\'b4\'f3\'d6\'b5\'ce\'aa0x7FFFFFFF\par
\par
stride_init:\par
\par
static void\par
stride_init(struct run_queue *rq) \{\par
     /* LAB6: YOUR CODE \par
      * (1) init the ready process list: rq->run_list\par
      * (2) init the run pool: rq->lab6_run_pool\par
      * (3) set number of process: rq->proc_num to 0       \par
      */\par
    memset(&(rq->lab6_run_pool), 0, sizeof(rq->lab6_run_pool));\par
    rq->proc_num = 0;\par
\}\par
\'b3\'f5\'ca\'bc\'bb\'af\'ba\'af\'ca\'fd\'a3\'ac\'d2\'f2\'ce\'aa\'d6\'bb\'d3\'c3\'b5\'bd\'c1\'cb\'d0\'b1\'b6\'d1\'a3\'ac\'d2\'f2\'b4\'cb\'d6\'bb\'d0\'e8\'d2\'aa\'bd\'ab\'d0\'b1\'b6\'d1\'b3\'d8lab6_run_pool\'b3\'f5\'ca\'bc\'bb\'af\'bc\'b4\'bf\'c9\'a3\'ac\'c8\'f4\'d2\'aa\'d3\'c3\'cb\'ab\'cf\'f2\'c1\'b4\'b1\'ed\'d4\'f2\'cd\'ac\'ca\'b1\'d0\'e8\'d2\'aa\'b6\'d4rq->run_list\'b3\'f5\'ca\'bc\'bb\'af\'a1\'a3\par
\par
stride_enqueue\par
\par
\tab static void\par
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) \{\par
     /* LAB6: YOUR CODE \par
      * (1) insert the proc into rq correctly\par
      * NOTICE: you can use skew_heap or list. Important functions\par
      *         skew_heap_insert: insert a entry into skew_heap\par
      *         list_add_before: insert  a entry into the last of list   \par
      * (2) recalculate proc->time_slice\par
      * (3) set proc->rq pointer to rq\par
      * (4) increase rq->proc_num\par
      */\par
    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);\par
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice)\par
        proc->time_slice = rq->max_time_slice;\par
    proc->rq = rq;\par
    rq->proc_num ++;\par
\}\par
\'c8\'eb\'b6\'d3\'ba\'af\'ca\'fd\'a3\'ac\'d0\'e8\'d2\'aa\'d7\'f6\'b5\'c4\'b2\'d9\'d7\'f7\'bc\'b4\'bd\'ab\'bd\'f8\'b3\'cc\'b5\'c4lab6_run_pool\'bd\'da\'b5\'e3\'b2\'e5\'c8\'eb\'b5\'bd\'d0\'b1\'b6\'d1lab6_run_pool\'a3\'ac\'cd\'ac\'ca\'b1\'b6\'d3\'c1\'d0\'bd\'f8\'b3\'cc\'ca\'fd\'bc\'d3\'d2\'bb\par
\par
stride_dequeue:\par
\par
static void\par
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) \{\par
     /* LAB6: YOUR CODE \par
      * (1) remove the proc from rq correctly\par
      * NOTICE: you can use skew_heap or list. Important functions\par
      *         skew_heap_remove: remove a entry from skew_heap\par
      *         list_del_init: remove a entry from the  list\par
      */\par
    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);\par
    rq->proc_num --;\par
\}\par
\'b3\'f6\'b6\'d3\'ba\'af\'ca\'fd\'a3\'ac\'d6\'bb\'d0\'e8\'bd\'ab\'b5\'b1\'c7\'b0\'bd\'f8\'b3\'cc\'b5\'c4\'b5\'c4lab6_run_pool\'bd\'da\'b5\'e3\'b4\'d3\'d0\'b1\'b6\'d1rq->lab6_run_pool\'d6\'d0\'d2\'c6\'b3\'fd\'bc\'b4\'bf\'c9\'a1\'a3\'c8\'f4\'ca\'b9\'d3\'c3\'c1\'b4\'b1\'ed\'ca\'b5\'cf\'d6\'d4\'f2\'d0\'e8\'d2\'aa\'d4\'da\'c1\'b4\'b1\'ed\'d6\'d0\'d2\'c6\'b3\'fd\'a1\'a3\'d7\'ee\'ba\'f3\'ca\'b1\'b6\'d3\'c1\'d0\'bd\'f8\'b3\'cc\'ca\'fd\'bc\'f51.\par
\par
stride_pick_next:\par
\par
static struct proc_struct *\par
stride_pick_next(struct run_queue *rq) \{\par
     /* LAB6: YOUR CODE \par
      * (1) get a  proc_struct pointer p  with the minimum value of stride\par
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll\par
             (1.2) If using list, we have to search list to find the p with minimum stride value\par
      * (2) update p;s stride value: p->lab6_stride\par
      * (3) return p\par
      */\par
    if(rq->lab6_run_pool==NULL)\par
        return NULL;\par
    struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);\par
    if(p->lab6_priority!=0)\par
        p->lab6_stride += BIG_STRIDE/p->lab6_priority;\par
    else\par
        p->lab6_stride += BIG_STRIDE;\par
    return p;\par
\}\par
\'d1\'a1\'c8\'a1\'ba\'af\'ca\'fd\'a3\'ac\'d2\'f2\'ce\'aa\'d0\'b1\'b6\'d1\'d2\'d1\'be\'ad\'b6\'d4\'d3\'c5\'cf\'c8\'bc\'b6\'bd\'f8\'d0\'d0\'c5\'c5\'d0\'f2\'c1\'cb\'a3\'ac\'d2\'f2\'b4\'cb\'b2\'bb\'d0\'e8\'d2\'aa\'ce\'d2\'c3\'c7\'b6\'e0\'d7\'f6\'b3\'f6\'c0\'ef\'a3\'ac\'d6\'bb\'d0\'e8\'d2\'aa\'d3\'c3le2proc\'b4\'d3\'d0\'b1\'b6\'d1\'d6\'d0\'cc\'e1\'c8\'a1stride\'d7\'ee\'d0\'a1\'b5\'c4\'bd\'f8\'b3\'cc\'bc\'b4\'bf\'c9\'a1\'a3\par
\'d4\'dastride\'d4\'f6\'bc\'d3\'ca\'b1\'ca\'b9\'d3\'c3\'b5\'c4\'ca\'c7p->lab6_stride += BIG_STRIDE/p->lab6_priority\'b5\'c4\'b7\'bd\'ca\'bd\'a3\'ac\'d5\'e2\'d1\'f9\'d3\'c5\'cf\'c8\'bc\'b6\'b8\'df\'b5\'c4\'bd\'f8\'b3\'cc\'c3\'bf\'b4\'ce\'d4\'f6\'bc\'d3\'b5\'c4\'b2\'bd\'b3\'a4\'be\'cd\'c9\'d9\'a3\'ac\'cd\'ac\'d1\'f9\'b5\'c4\'b2\'bd\'b3\'a4\'cb\'fc\'be\'cd\'bb\'e1\'b1\'bb\'b6\'e0\'b5\'f7\'b6\'c8\'bc\'b8\'b4\'ce\'a1\'a3\par
\'cd\'ac\'ca\'b1\'ce\'aa\'c1\'cb\'b1\'dc\'c3\'e2priority\'ce\'aa0\'b5\'bc\'d6\'c2\'b4\'ed\'ce\'f3\'a3\'a8\'b3\'f5\'ca\'bc\'bb\'af\'ca\'b1\'bb\'e1\'bd\'abpriority\'c9\'e8\'d6\'c3\'ce\'aa0\'a3\'a9\'a3\'ac\'c8\'f4\'ce\'aa0\'d4\'f2\'d6\'b1\'bd\'d3\'d4\'f6\'bc\'d3\'d7\'ee\'b4\'f3\'b2\'bd\'b3\'a4\'a1\'a3\par
\par
stride_proc_tick:\par
\par
static void\par
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) \{\par
     /* LAB6: YOUR CODE */\par
    if(proc->time_slice>0)\par
        proc->time_slice--;\par
    if(proc->time_slice==0)\par
        proc->need_resched = 1;\par
\}\par
\'b4\'a5\'b7\'a2\'ba\'af\'ca\'fd\'a3\'ac\'d3\'ebRR\'d2\'bb\'d1\'f9\'a3\'ac\'bd\'ab\'bd\'f8\'b3\'cc\'ca\'b1\'bc\'e4\'c6\'ac\'bc\'f5\'d0\'a1\'a3\'ac\'c8\'f4\'ce\'aa0\'d4\'f2\'bd\'f8\'d0\'d0\'b5\'f7\'b6\'c8\'a1\'a3\par
\'d6\'c1\'b4\'cb\'d0\'b1\'b6\'d1\'b0\'e6\'b1\'be\'b5\'c4Stride\'b7\'a8\'b5\'c4\'b5\'f7\'b6\'c8\'b4\'fa\'c2\'eb\'be\'cd\'ca\'b5\'cf\'d6\'cd\'ea\'c1\'cb\'a1\'a3\par
\par
\par
\par
}
 