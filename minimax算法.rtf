{\rtf1\ansi\ansicpg936\deff0\nouicompat\deflang1033\deflangfe2052{\fonttbl{\f0\fnil\fcharset134 \'cb\'ce\'cc\'e5;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang2052 Minimax\'cb\'e3\'b7\'a8\par
\'cb\'e3\'b7\'a8\'b5\'c4\'bb\'f9\'b1\'be\'cb\'bc\'cf\'eb\'a3\'ba\par
1. \'c9\'e8\'b2\'a9\'de\'c4\'cb\'ab\'b7\'bd\'d6\'d0\'d2\'bb\'b7\'bd\'ce\'aaMAX\'a3\'ac\'c1\'ed\'d2\'bb\'b7\'bd\'ce\'aaMIN\'a1\'a3\'c8\'bb\'ba\'f3\'ce\'aa\'c6\'e4\'d6\'d0\'b5\'c4\'d2\'bb\'b7\'bd(\'bc\'c6\'cb\'e3\'bb\'fa)\'d5\'d2\'d2\'bb\'b8\'f6\'d7\'ee\'bc\'d1\'d7\'df\'b7\'a8\'a1\'a3\par
2. \'ce\'aa\'c1\'cb\'d5\'d2\'b5\'bd\'b5\'b1\'c7\'b0\'c6\'e5\'be\'d6\'b5\'c4\'d7\'ee\'d3\'c5\'d7\'df\'b7\'a8\'a3\'ac\'d0\'e8\'d2\'aa\'b6\'d4\'b8\'f7\'b8\'f6\'bf\'c9\'c4\'dc\'b5\'c4\'d7\'df\'b7\'a8\'cb\'f9\'b2\'fa\'c9\'fa\'b5\'c4\'ba\'f3\'d0\'f8\'c6\'e5\'be\'d6\'bd\'f8\'d0\'d0\'b1\'c8\'bd\'cf\'a3\'ac\'cd\'ac\'ca\'b1\'d2\'b2\'d2\'aa\'bf\'bc\'c2\'c7\'b6\'d4\'b7\'bd\'bf\'c9\'c4\'dc\'b5\'c4\'d7\'df\'b7\'a8\'a3\'ac\'b2\'a2\'b6\'d4\'ba\'f3\'d0\'f8\'c6\'e5\'be\'d6\'b8\'b3\'d3\'e8\'d2\'bb\'b6\'a8\'b5\'c4\'c8\'a8\'d6\'b5\'a3\'a8\'bb\'f2\'d5\'df\'b3\'c6\'d6\'ae\'ce\'aa\'b7\'d6\'ca\'fd\'a3\'a9\'a1\'a3\'d2\'b2\'be\'cd\'ca\'c7\'cb\'b5\'a3\'ac\'d2\'d4\'b5\'b1\'c7\'b0\'c6\'e5\'be\'d6\'ce\'aa\'b8\'f9\'bd\'da\'b5\'e3\'c9\'fa\'b3\'c9\'d2\'bb\'bf\'c3\'b2\'a9\'de\'c4\'ca\'f7\'a3\'acN\'b2\'bd\'ba\'f3\'b5\'c4\'c6\'e5\'be\'d6\'d7\'f7\'ce\'aa\'ca\'f7\'b5\'c4\'d2\'b6\'d7\'d3\'bd\'da\'b5\'e3\'a1\'a3\'cd\'ac\'ca\'b1\'b4\'d3\'ca\'f7\'b8\'f9\'bf\'aa\'ca\'bc\'c2\'d6\'c1\'f7\'b8\'f8\'c3\'bf\'b2\'e3\'bd\'e1\'b5\'e3\'b8\'b3\'d3\'e8Max\'ba\'cdMin\'b5\'c4\'b3\'c6\'ba\'c5\par
3. \'d3\'c3\'d2\'bb\'b8\'f6\'c6\'c0\'b9\'c0\'ba\'af\'ca\'fd\'c0\'b4\'b7\'d6\'ce\'f6\'bc\'c6\'cb\'e3\'b8\'f7\'b8\'f6\'ba\'f3\'d0\'f8\'c6\'e5\'be\'d6\'a3\'a8\'bc\'b4\'d2\'b6\'d7\'d3\'bd\'da\'b5\'e3\'a3\'a9\'b5\'c4\'c8\'a8\'d6\'b5\'a3\'ac\'b9\'c0\'cb\'e3\'b3\'f6\'c0\'b4\'b5\'c4\'b7\'d6\'ca\'fd\'ce\'aa\'be\'b2\'cc\'ac\'b9\'c0\'d6\'b5\par
4. \'b5\'b1\'b6\'cb\'bd\'da\'b5\'e3\'b5\'c4\'b9\'c0\'d6\'b5\'bc\'c6\'cb\'e3\'b3\'f6\'c0\'b4\'ba\'f3\'a3\'ac\'d4\'d9\'cd\'c6\'cb\'e3\'b3\'f6\'b8\'b8\'bd\'da\'b5\'e3\'b5\'c4\'b5\'c3\'b7\'d6\'a1\'a3\'cd\'c6\'cb\'e3\'b5\'c4\'b7\'bd\'b7\'a8\'ca\'c7\'a3\'ba\'b6\'d4\'d3\'da\'b4\'a6\'d3\'daMAX\'b2\'e3\'b5\'c4\'bd\'da\'b5\'e3\'a3\'ac\'d1\'a1\'c6\'e4\'d7\'d3\'bd\'da\'b5\'e3\'d6\'d0\'d2\'bb\'b8\'f6\'d7\'ee\'b4\'f3\'b5\'c4\'b5\'c3\'b7\'d6\'d7\'f7\'ce\'aa\'b8\'b8\'bd\'da\'b5\'e3\'b5\'c4\'b5\'c3\'b7\'d6\'a3\'ac\'d5\'e2\'ca\'c7\'ce\'aa\'c1\'cb\'ca\'b9\'d7\'d4\'bc\'ba\'d4\'da\'bf\'c9\'b9\'a9\'d1\'a1\'d4\'f1\'b5\'c4\'b7\'bd\'b0\'b8\'d6\'d0\'d1\'a1\'d2\'bb\'b8\'f6\'b6\'d4\'d7\'d4\'bc\'ba\'d7\'ee\'d3\'d0\'c0\'fb\'b5\'c4\'b7\'bd\'b0\'b8\'a3\'bb\'b6\'d4\'b4\'a6\'d3\'daMIN\'b2\'e3\'b5\'c4\'bd\'da\'b5\'e3\'a3\'ac\'d1\'a1\'c6\'e4\'d7\'d3\'bd\'da\'b5\'e3\'d6\'d0\'d2\'bb\'b8\'f6\'d7\'ee\'d0\'a1\'b5\'c4\'b5\'c3\'b7\'d6\'d7\'f7\'ce\'aa\'b8\'b8\'bd\'da\'b5\'e3\'b5\'c4\'b5\'c3\'b7\'d6\'a3\'ac\'d5\'e2\'ca\'c7\'ce\'aa\'c1\'cb\'c1\'a2\'d7\'e3\'d3\'da\'d7\'ee\'bb\'b5\'b5\'c4\'c7\'e9\'bf\'f6\'a3\'ac\'d5\'e2\'d1\'f9\'bc\'c6\'cb\'e3\'b3\'f6\'b5\'c4\'b8\'b8\'bd\'da\'b5\'e3\'b5\'c4\'b5\'c3\'b7\'d6\'ce\'aa\'b5\'b9\'cd\'c6\'d6\'b5\'a1\'a3\par
5.\'c8\'e7\'b4\'cb\'b7\'b4\'cd\'c6\'d6\'c1\'b8\'f9\'bd\'da\'b5\'e3\'cf\'c2\'b5\'c4\'b5\'da\'d2\'bb\'b2\'e3\'ba\'a2\'d7\'d3\'a3\'ac\'c8\'e7\'b9\'fb\'c6\'e4\'d6\'d0\'c4\'b3\'b8\'f6\'ba\'a2\'d7\'d3\'c4\'dc\'bb\'f1\'b5\'c3\'bd\'cf\'b4\'f3\'b5\'c4\'b5\'b9\'cd\'c6\'d6\'b5\'a3\'ac\'d4\'f2\'cb\'fc\'be\'cd\'ca\'c7\'b5\'b1\'c7\'b0\'c6\'e5\'be\'d6\'d7\'ee\'ba\'c3\'b5\'c4\'d7\'df\'b7\'a8\'a1\'a3\par
\'b0\'d1\'d6\'f7\'d2\'aa\'b5\'c4\'cb\'e3\'b7\'a8\'d0\'b4\'b3\'f6\'c0\'b4\'c1\'cb\'a3\'ac\'b7\'d6\'ce\'aa\'c1\'bd\'b8\'f6\'ba\'af\'ca\'fd\'a3\'ac\'d2\'bb\'b8\'f6\'ce\'aa\'b9\'c0\'d6\'b5\'ba\'af\'ca\'fd\'a3\'ac\'bc\'b4\'bc\'c6\'cb\'e3\'b8\'f7\'b8\'f6\'ba\'f3\'d0\'f8\'c6\'e5\'be\'d6\'a3\'a8\'bc\'b4\'d2\'b6\'d7\'d3\'bd\'da\'b5\'e3\'a3\'a9\'b5\'c4\'c8\'a8\'d6\'b5\'a3\'bb\'c1\'ed\'d2\'bb\'b8\'f6\'ce\'aa\'b1\'e9\'c0\'fa\'ba\'af\'ca\'fd\'a3\'ac\'c9\'fa\'b3\'c9\'d6\'b8\'b6\'a8\'b1\'e9\'c0\'fa\'c9\'ee\'b6\'c8\'b5\'c4\'b2\'a9\'de\'c4\'ca\'f7\'a1\'a3\par
\par
def miniMaxEvalauate(board,player):\par
 \par
    opponent = \{ Player_O : Player_X, Player_X : Player_O \}\par
 \par
    winning_rows = [[0,1,2],[3,4,5],[6,7,8], # vertical\par
                    [0,3,6],[1,4,7],[2,5,8], # horizontal\par
                    [0,4,8],[2,4,6]]         # diagonal\par
 \par
    count=0\par
 \par
    clone_pieces=[Empty]*9 # Initialize an empty chessboard\par
 \par
    # Copy the current chessboard\par
    for i in range(9):\par
        clone_pieces=board.pieces \par
 \par
    # fill it into the clone chessboard\par
    for pos in range(9):\par
        if clone_pieces[pos] == Empty:\par
            clone_pieces[pos]=player\par
 \par
    # analyse ur point value\par
    for row in winning_rows:\par
        if allEqual([clone_pieces for i in row]):\par
            count+=1\par
 \par
 \par
    clone_pieces2=[Empty]*9\par
 \par
    for i in range(9):\par
        clone_pieces2=board.pieces\par
 \par
    for pos in range(9):\par
        if clone_pieces2[pos] == Empty:\par
            clone_pieces2[pos]=opponent[player]\par
    for row in winning_rows:\par
        if allEqual([clone_pieces2 for i in row]):\par
            count-=1\par
 \par
    return count\par
\par
def comp2(board,player):\par
 \par
    t0 = time.time()\par
    board.output() # print the chessboard \par
 \par
    def miniMax(board, depth, p=player):\par
 \par
        opponent = \{ Player_O : Player_X, Player_X : Player_O \}\par
        moves=[]\par
        outcomes=[]\par
 \par
        # return if game over\par
        if board.gameOver():\par
            if board.gameOver()== player:\par
                return +100\par
            if board.gameOver()== opponent[player]:\par
                return -100\par
            return 0\par
 \par
        if depth!=0:\par
 \par
            depth-=1\par
            for move in board.getValidMoves():\par
 \par
                board.makeMove(move, p)\par
                point=miniMax(board,depth,opponent[p])\par
                outcomes+=[point]\par
                moves+=[move]\par
                board.undoMove(move)\par
        else:\par
            return miniMaxEvalauate2(board,player)\par
 \par
        if p != player:\par
            #return min(outcomes)\par
            min_element = 100\par
            n=0\par
            for o in outcomes:\par
                if o == -100:\par
                    board.bestmove=moves[n]\par
                    return o\par
                min_element = min(o,min_element)\par
                if o==min_element:\par
                    board.bestmove=moves[n]\par
                n+=1\par
            return min_element\par
        else:\par
            #return max(outcomes)\par
            max_element = -100\par
            n=0\par
            for o in outcomes:\par
                if o == +100:\par
                    board.bestmove=moves[n]\par
                    return o\par
                max_element = max(o,max_element)\par
                if o==max_element:\par
                    board.bestmove=moves[n]\par
                n+=1\par
            return max_element\par
 \par
    miniMax(board, 3)\par
 \par
    board.makeMove(board.bestmove, player)\par
    print "computer move: %0.3f ms" % ((time.time()-t0)*1000)\par
\par
def miniMaxEvalauate2(board,player):\par
 \par
    opponent = \{ Player_O : Player_X, Player_X : Player_O \}\par
 \par
    winning_rows = [[0,1,2],[3,4,5],[6,7,8], # vertical\par
                    [0,3,6],[1,4,7],[2,5,8], # horizontal\par
                    [0,4,8],[2,4,6]]         # diagonal\par
 \par
    count=0\par
 \par
    clone_pieces=[Empty]*9\par
 \par
    for i in range(9):\par
        clone_pieces=board.pieces    \par
 \par
    for pos in range(9):\par
        if clone_pieces[pos] == Empty:\par
            clone_pieces[pos]=player\par
    for row in winning_rows:\par
        flag=0\par
        for i in row:\par
            if(clone_pieces==opponent[player]):\par
                flag+=1\par
        if (flag==0):\par
            count+=1\par
        if (flag==2):\par
            count-=4\par
 \par
    clone_pieces2=[Empty]*9\par
 \par
    for i in range(9):\par
        clone_pieces2=board.pieces\par
 \par
    for pos in range(9):\par
        if clone_pieces2[pos] == Empty:\par
            clone_pieces2[pos]=opponent[player]\par
    for row in winning_rows:\par
        flag=0\par
        for i in row:\par
            if(clone_pieces2==opponent[player]):\par
                flag+=1\par
        if (flag==3):\par
            count-=1\par
 \par
    return count\par
\par
\par
}
 